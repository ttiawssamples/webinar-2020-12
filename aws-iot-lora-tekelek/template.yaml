AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-iot-tek-transform

  Sample SAM Template for aws-iot-tek-transform

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  # DynamoDB table to store all events
  TekelekEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: device_id
          KeyType: HASH
        - AttributeName: time
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: device_id
          AttributeType: S
        - AttributeName: time
          AttributeType: S
        - AttributeName: event_type
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: event-type-Index
          KeySchema:
            - AttributeName: event_type
              KeyType: HASH
            - AttributeName: time
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: tekelek_events
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  ProcessUplinkFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Tracing: Active
      CodeUri: transform-lora
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Events:
        ProcessUplinkTekelek:
          Type: IoTRule
          Properties:
            Sql: 'select * from "lorawan/+/uplink" WHERE end_device_ids.application_ids.application_id = "tekelek-test-app"' # Set to the app id you used in TTS
      Policies:
        - Version: "2012-10-17" # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - iot:Publish
                - iot:DescribeEndpoint
              Resource: "*"

  # IoT Analytics Channel
  TekelekChannel:
    Type: "AWS::IoTAnalytics::Channel"
    Properties:
      ChannelName: "tekelek_app_channel"

  # IoT Analytics DataStore
  TekelekDatastore:
    Type: "AWS::IoTAnalytics::Datastore"
    Properties:
      DatastoreName: "tekelek_app_datastore"

  # IoT Analytics Pipeline
  TekelekPipeline:
    Type: "AWS::IoTAnalytics::Pipeline"
    Properties:
      PipelineName: "tekelek_app_pipeline"
      PipelineActivities:
        - Channel:
            Name: "ChannelActivity"
            ChannelName: "tekelek_app_channel"
            Next: "DatastoreActivity"
          Datastore:
            Name: "DatastoreActivity"
            DatastoreName: "tekelek_app_datastore"

  # IoT Analytics DataSet
  TekelekDataset:
    Type: "AWS::IoTAnalytics::Dataset"
    DependsOn: "TekelekDatastore"
    Properties:
      DatasetName: "tekelek_app_dataset"
      Actions:
        - ActionName: "SqlAction"
          QueryAction:
            SqlQuery: "SELECT device_eui, device_id, gateway_id, timestamp, concat(substring(time,1,19),'.000Z') as time, product_type, distance_cm, temperature_c, temperature_f, sonic_src, sonic_rssi, alarm_status FROM tekelek_app_datastore"
      Triggers:
        - Schedule:
            ScheduleExpression: "cron(0/1 * * * ? *)"

  # IAM Role for IoT Rule
  TekelekEnhancedRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - iot.amazonaws.com
            Action:
              - sts:AssumeRole

  # IAM Role Policy for IoT Rule
  TekelekEnhancedRuleRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "tekelek-enhanced-rule-policy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "iotanalytics:BatchPutMessage"
            Resource: "*"
          - Effect: "Allow"
            Action: "dynamodb:PutItem"
            Resource:
              Fn::GetAtt:
                - TekelekEventsTable
                - Arn
      Roles:
        - Ref: "TekelekEnhancedRuleRole"

  # IoT Rule to process enhanced messages
  TekelekEnhancedRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: "TekelekEnhancedRule"
      TopicRulePayload:
        Actions:
          - IotAnalytics:
              ChannelName: TekelekChannel
              RoleArn:
                Fn::GetAtt:
                  - TekelekEnhancedRuleRole
                  - Arn
          - DynamoDBv2:
              PutItem:
                TableName:
                  Ref: "TekelekEventsTable"
              RoleArn:
                Fn::GetAtt:
                  - TekelekEnhancedRuleRole
                  - Arn
        RuleDisabled: "False"
        Sql: SELECT * FROM 'lorawan/tekelek/+/enhanced where payload.message_type = "Measurement"'

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ProcessUplinkFunction:
    Description: "Process Uplink Function Lambda Function ARN"
    Value: !GetAtt ProcessUplinkFunction.Arn
  ProcessUplinkFunctionIamRole:
    Description: "Implicit IAM Role created for TransformLoraFunction function"
    Value: !GetAtt ProcessUplinkFunctionRole.Arn
